// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Escolhe para onde vai o load
    DMux8Way(
        in=load, 
        sel=address[3..5], 
        a=ram0load, 
        b=ram1load, 
        c=ram2load, 
        d=ram3load, 
        e=ram4load, 
        f=ram5load, 
        g=ram6load, 
        h=ram7load
    );

    RAM8(in=in, out=ram0out, address=address[0..2], load=ram0load);
    RAM8(in=in, out=ram1out, address=address[0..2], load=ram1load);
    RAM8(in=in, out=ram2out, address=address[0..2], load=ram2load);
    RAM8(in=in, out=ram3out, address=address[0..2], load=ram3load);
    RAM8(in=in, out=ram4out, address=address[0..2], load=ram4load);
    RAM8(in=in, out=ram5out, address=address[0..2], load=ram5load);
    RAM8(in=in, out=ram6out, address=address[0..2], load=ram6load);
    RAM8(in=in, out=ram7out, address=address[0..2], load=ram7load);

    // Escolhe para onde vai a sa√≠da
    Mux8Way16(
        out=out,
        sel=address[3..5],
        a=ram0out, 
        b=ram1out, 
        c=ram2out, 
        d=ram3out, 
        e=ram4out, 
        f=ram5out, 
        g=ram6out, 
        h=ram7out
    );
}